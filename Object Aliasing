Box a = new Box(7);   // create a Box object, a → that object
Box b = a;            // b now refers to the SAME object as a
b.value = 200;        // change the field via b
System.out.println(a.value); // prints 200, because a and b share the object
class Box {
    int value;
    Box(int v) { value = v; }
}
 
public class AliasExample {
    public static void main(String[] args) {
        Box a = new Box(7);  // a → Box with value = 7
        Box b = a;           // b points to the SAME object
        b.value = 200;       // change via b

        System.out.println(a.value); // 200
        System.out.println(b.value); // 200
    }
}
   check alias diag
// KEY INSIGHT: `a` and `b` are ALIASES - different names for the same object!
Reference Assignment: b = a copies the memory address, not the object
Shared Memory: Both variables point to the same location in memory
Aliasing Effect: Changes through one variable are visible through the other
One Object: There's still only ONE Box object in memory, just multiple ways to access it
